%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.59.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 843
%%HiResBoundingBox: 0 0 2391.1199 842.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 842.88 re
W
q
[0.24 0 0 -0.24 0 842.88] cm
q
0 0 9962.5 3512.5 re
W*
q
[58.60294 0 0 58.59375 293.01471 292.96875] cm
q
13.0424 15.2804 m
36.9576 15.2804 l
37.170624 15.2804 37.343327 15.453105 37.343327 15.666128 c
37.343327 31.140629 l
37.343327 31.353653 37.17062 31.526361 36.9576 31.526361 c
13.0424 31.526361 l
12.829376 31.526361 12.656673 31.353653 12.656673 31.140629 c
12.656673 15.666129 l
12.656673 15.453105 12.829377 15.280401 13.0424 15.280401 c
13.0424 15.2804 l
h
14.263861 16.88759 m
14.263861 29.919189 l
35.73616 29.919189 l
35.73616 16.887589 l
14.263861 16.887589 l
14.263861 16.88759 l
h
W
[24.686652 0 0 16.245961 12.656672 15.2804] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc0_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc0_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc0_0 } {
0.5 sub 2 mul 0 add xpdfFunc0_1
} ifelse
}
def
0 1 0 axialSH
Q
q
19.429199 33.6759 11.141602 1.114899 re
W
[11.141602 0 0 1.114899 19.429199 33.6759] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc1_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc1_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc1_0 } {
0.5 sub 2 mul 0 add xpdfFunc1_1
} ifelse
}
def
0 1 0 axialSH
Q
q
17.395399 23.915501 m
17.395399 22.982401 l
22.791401 20.7045 l
22.791401 21.698299 l
18.5126 23.454599 l
22.791401 25.226101 l
22.791401 26.2218 l
17.395399 23.915501 l
h
W
[5.396002 0 0 5.5173 17.395399 20.704502] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc2_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc2_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc2_0 } {
0.5 sub 2 mul 0 add xpdfFunc2_1
} ifelse
}
def
0 1 0 axialSH
Q
q
23.419201 27.615801 m
25.7805 19.1929 l
26.5809 19.1929 l
24.225201 27.615801 l
23.419201 27.615801 l
h
W
[3.161699 0 0 8.422901 23.419202 19.1929] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 0.999999 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc3_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc3_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc3_0 } {
0.5 sub 2 mul 0 add xpdfFunc3_1
} ifelse
}
def
-0 0.999999 0 axialSH
Q
q
32.5989 23.915501 m
27.202999 26.2218 l
27.202999 25.226101 l
31.476101 23.454599 l
27.202999 21.698299 l
27.202999 20.7045 l
32.5989 22.982401 l
32.5989 23.915501 l
h
W
[5.395901 0 0 5.5173 27.202997 20.704502] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc4_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc4_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc4_0 } {
0.5 sub 2 mul 0 add xpdfFunc4_1
} ifelse
}
def
0 1 0 axialSH
Q
q
22.961599 31.140699 m
27.038401 31.140699 l
28.1635 33.800999 l
21.8365 33.800999 l
22.961599 31.140699 l
h
W
[6.326999 0 0 2.660299 21.836499 31.1407] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc5_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc5_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc5_0 } {
0.5 sub 2 mul 0 add xpdfFunc5_1
} ifelse
}
def
0 1 0 axialSH
Q
q
25.3857 0.226008 m
35.824799 6.253008 l
35.824039 6.254319 l
46.260941 12.279989 l
46.649685 12.504438 l
46.649685 12.945977 l
46.649685 24.999977 l
46.649685 37.053978 l
46.649685 37.495518 l
46.260941 37.719967 l
35.824039 43.745636 l
35.824799 43.746948 l
25.385698 49.773949 l
24.999969 49.996635 l
24.614241 49.773949 l
14.17514 43.746948 l
14.175901 43.745636 l
3.739 37.719967 l
3.350256 37.495518 l
3.350256 37.053978 l
3.350256 24.999977 l
3.350256 12.945977 l
3.350256 12.504438 l
3.739 12.279989 l
14.175901 6.254319 l
14.17514 6.253008 l
24.614241 0.226008 l
24.999969 0.003323 l
25.385698 0.226008 l
25.3857 0.226008 l
h
24.999952 2.675708 m
17.340193 7.098058 l
17.340948 7.099389 l
5.664748 13.840629 l
5.664748 36.159328 l
17.340948 42.90057 l
17.340193 42.901882 l
24.999992 47.324253 l
32.659752 42.901901 l
32.658997 42.90057 l
44.335197 36.159328 l
44.335197 13.840628 l
32.658997 7.099388 l
32.659752 7.098077 l
24.999952 2.675707 l
24.999952 2.675708 l
h
W
[43.299426 0 0 49.993313 3.350257 0.00332465] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc6_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc6_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc6_0 } {
0.5 sub 2 mul 0 add xpdfFunc6_1
} ifelse
}
def
-0 1 0 axialSH
Q
Q
q
[42.154469 0 0 42.147854 3760.2856 1179.6781] cm
3.64 20 m
1.16 20 l
1.16 7.46 l
3.64 7.46 l
3.64 20 l
h
9.42 9.940001 m
8.82 9.940001 8.32 10.440001 8.32 11.040001 c
8.32 12.480001 l
18.380001 12.480001 l
18.380001 16.420002 l
18.380001 18.400002 16.780001 20.000002 14.800001 20.000002 c
5.840001 20.000002 l
5.840001 17.520002 l
14.800001 17.520002 l
15.400002 17.520002 15.900002 17.020002 15.900002 16.420002 c
15.900002 14.980001 l
5.840001 14.980001 l
5.840001 11.040001 l
5.840001 9.060001 7.440001 7.460001 9.420001 7.460001 c
18.380001 7.460001 l
18.380001 9.940001 l
9.420001 9.940001 l
9.42 9.940001 l
h
31.42 7.46 m
31.42 9.940001 l
26.98 9.940001 l
26.98 20 l
24.5 20 l
24.5 9.94 l
20.059999 9.94 l
20.059999 7.46 l
31.419998 7.46 l
31.42 7.46 l
h
42.720001 7.46 m
45.420002 7.46 l
40.080002 20 l
37.380001 20 l
32.060001 7.46 l
34.760002 7.46 l
38.740002 16.82 l
42.720001 7.46 l
h
55.18 7.46 m
57.16 7.46 58.760002 9.06 58.760002 11.04 c
58.760002 20 l
56.280003 20 l
56.280003 14.98 l
48.700005 14.98 l
48.700005 20 l
46.220005 20 l
46.220005 11.04 l
46.220005 9.06 47.820004 7.46 49.800003 7.46 c
55.180004 7.46 l
55.18 7.46 l
h
48.700001 12.48 m
56.279999 12.48 l
56.279999 11.039999 l
56.279999 10.439999 55.779999 9.939999 55.18 9.939999 c
49.799999 9.939999 l
49.200001 9.939999 48.700001 10.439999 48.700001 11.039999 c
48.700001 12.48 l
h
73.379997 20 m
70.899994 20 l
70.899994 11.04 l
70.899994 10.44 70.399994 9.94 69.799995 9.94 c
64.419998 9.94 l
63.82 9.94 63.32 10.44 63.32 11.04 c
63.32 20 l
60.84 20 l
60.84 11.04 l
60.84 9.06 62.439999 7.46 64.419998 7.46 c
69.799995 7.46 l
71.779999 7.46 73.379997 9.06 73.379997 11.04 c
73.379997 20 l
h
92.639999 12.48 m
95.120003 12.48 l
95.120003 16.56 l
95.040001 18.48 93.480003 20 91.540001 20 c
86.160004 20 l
84.18 20 82.580002 18.4 82.580002 16.42 c
82.580002 11.04 l
82.580002 9.06 84.18 7.46 86.160004 7.46 c
93.880005 7.46 l
93.880005 9.940001 l
86.160004 9.940001 l
85.560005 9.940001 85.060005 10.440001 85.060005 11.040001 c
85.060005 16.420002 l
85.060005 17.020002 85.560005 17.520002 86.160004 17.520002 c
91.540001 17.520002 l
92.139999 17.520002 92.639999 17.020002 92.639999 16.420002 c
92.639999 12.480001 l
92.639999 12.48 l
h
106.059998 7.46 m
108.040001 7.46 109.639999 9.06 109.639999 11.04 c
109.639999 20 l
107.159996 20 l
107.159996 14.98 l
99.579994 14.98 l
99.579994 20 l
97.099991 20 l
97.099991 11.04 l
97.099991 9.06 98.699989 7.46 100.679993 7.46 c
106.05999 7.46 l
106.059998 7.46 l
h
99.580002 12.48 m
107.160004 12.48 l
107.160004 11.039999 l
107.160004 10.439999 106.660004 9.939999 106.060005 9.939999 c
100.680008 9.939999 l
100.080009 9.939999 99.580009 10.439999 99.580009 11.039999 c
99.580009 12.48 l
99.580002 12.48 l
h
120.599998 14.96 m
123.080002 14.96 l
123.080002 16.42 l
123.080002 18.4 121.480003 20 119.5 20 c
115.300003 20 l
113.32 20 111.720001 18.4 111.720001 16.42 c
111.720001 7.46 l
114.200005 7.46 l
114.200005 16.42 l
114.200005 17.02 114.700005 17.52 115.300003 17.52 c
119.5 17.52 l
120.099998 17.52 120.599998 17.02 120.599998 16.42 c
120.599998 14.96 l
h
128.220001 9.940001 m
127.620003 9.940001 127.120003 10.440001 127.120003 11.040001 c
127.120003 12.480001 l
134.699997 12.480001 l
134.699997 14.980001 l
127.119995 14.980001 l
127.119995 15.180001 l
127.119995 16.420002 l
127.119995 20.000002 l
124.639992 20.000002 l
124.639992 16.420002 l
124.639992 11.040002 l
124.639992 9.060001 126.23999 7.460002 128.219986 7.460002 c
135.939987 7.460002 l
135.939987 9.940002 l
128.219986 9.940002 l
128.220001 9.940001 l
h
140.179993 20 m
137.699997 20 l
137.699997 7.46 l
140.179993 7.46 l
140.179993 20 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
